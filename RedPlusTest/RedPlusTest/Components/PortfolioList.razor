@using RedPlusTest.Models
@using RedPlusTest.Services
@using Microsoft.AspNetCore.Components.Web
@inject PortfolioServiceJsonFile PortfolioService

<h2>Using Blazor Component</h2>
<div class="row gx-5">
	@foreach (var portfolio in PortfolioService.GetPortfolios())
	{
		<div class="col mb-5 h-100">
			<div class="feature bg-primary bg-gradient text-white rounded-3 mb-3">
				<img class="card-img-top img-fluid" src="@portfolio.Image" />
			</div>
			<h2 class="h5">Project @portfolio.Title</h2>
			<p class="mb-0">@portfolio.Description</p>
			<div class="card-footer">
				<button class="btn btn-primary" data-toggle="modal" data-target="#portfolioModal" @onclick="(() => SelectPortfolio(portfolio.Id))">Read More...</button>
			</div>
		</div>

	}
</div>
@if (selectedPortfolio != null)
{
	<!-- Modal -->
	<div class="modal fade" id="portfolioModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">@selectedPortfolio.Title</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					@selectedPortfolio.Description
				</div>
				<div class="modal-footer">
					@if (voteCount == 0)
					{
						<span>Please vote!</span>
					}
					else
					{
						<span>@voteCount @voteLabel</span>
					}
					@for (int i = 1; i < 6; i++)
					{
						var currentStar = i;
						if (i <= currentRating)
						{
							<span @onclick="() => HandleClick(currentStar)">★</span>

						}
						else
						{
							<span @onclick="() => HandleClick(currentStar)">☆</span>

						}
					}
				</div>
			</div>
		</div>
	</div>
}

@code {
	Portfolio selectedPortfolio = new Portfolio();
	int currentRating = 0;
	int voteCount = 0;
	string voteLabel;

	void SelectPortfolio(int portfolioId)
	{
		selectedPortfolio = PortfolioService.GetPortfolios().First(p => p.Id == portfolioId);
		if (selectedPortfolio.Ratings == null)
		{
			currentRating = 0;
			voteCount = 0;
		} 
		else
		{
			voteCount = selectedPortfolio.Ratings.Count();
			voteLabel = (voteCount > 1) ? "Votes" : "Vote";
			currentRating = selectedPortfolio.Ratings.Sum() / voteCount;
		}

	}

	void HandleClick(int rating)
	{
		PortfolioService.AddRating(selectedPortfolio.Id, rating);
		SelectPortfolio(selectedPortfolio.Id);
	}

}
